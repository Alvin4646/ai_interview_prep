'use client'
import {zodResolver} from "@hookform/resolvers/zod";
import {useForm} from "react-hook-form";
import {z} from 'zod'
import {Button} from "@/components/ui/button";
import {
    Form
} from "@/components/ui/form";
import Image from "next/image";
import Link from "next/link";
import {toast} from "sonner";
import FormField from "@/components/FormField";
import {useRouter} from "next/navigation";
import {createUserWithEmailAndPassword, signInWithEmailAndPassword} from "@firebase/auth";
import {auth} from "@/firebase/client";
import {signIn, signUp} from "@/lib/actions/auth.action";

const authFormSchema = (type: FormType) => {
    return z.object({
        name: type === 'sign-up' ? z.string().min(3) : z.string().optional(),
        email: z.string().email(),
        password: z.string().min(6)
    })
}

const AuthForm = ({type}: { type: FormType }) => {
    const router = useRouter();
    const formSchema = authFormSchema(type);
    const form = useForm<z.infer<typeof formSchema>>({
        resolver: zodResolver(formSchema),
        defaultValues: {
            name: "",
            email: "",
            password: ""
        }
    })


    const onSubmit=async (values: z.infer<typeof formSchema>)=> {
        try {
            if (type === "sign-up") {
                const {name, email, password} = values;

                 const userCredentials = await createUserWithEmailAndPassword(auth,email, password);

                 const result= await signUp({
                     uid: userCredentials.user.uid,
                     name:name!,
                     email,
                     password,
                 })

                 if(!result?.success){
                     toast.error(result?.message);
                     return;
                 }

                toast.success("Sign up successfully");
                router.push("/sign-in");
            } else {
                const {email, password} = values;
                console.log(email,password)
                const userCredentials = await  signInWithEmailAndPassword(auth,email, password);
                const idToken= await userCredentials.user.getIdToken()
                if(!idToken){
                    toast.error("Unable to sign in, please try again later");
                    return;
                }
                await signIn({
                    email,idToken
                })
                toast.success("Sign up successfully");
                router.push("/");
            }
        } catch (e) {
            console.log(e)
            toast.error(`There was an error: ${e}`);
        }
    }

    const isSignin = type === 'sign-in'
    return (
        <div className='card-border lg:min-w-[566px]'>
            <div className='flex flex-col gap-6 card py-14 px-10'>
                <div className='flex flex-row gap-2 justify-center'>
                    <Image src='/logo.svg' alt='logo image' height={32} width={38}/>
                    <h2 className='text-primary-100'>PrepWise</h2>
                </div>
                <h3>Practice interview with AI</h3>

                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="w-full space-y-6 mt-4 form">
                        {!isSignin && <FormField
                            control={form.control} name='name' label='Name' placeholder='Your Name'/>}
                        <FormField
                            control={form.control} name='email' label='Email' placeholder='Your email address'/>
                        <FormField
                            control={form.control} name='password' label='Password' placeholder='Enter your password'
                            type='password'/>
                        <Button className='btn' type="submit">{isSignin ? 'Sign in' : 'Create an Account'}</Button>
                    </form>
                </Form>
                <p className='text-center'>
                    {isSignin ? "Don't have an account yet?" : "Already have an account"}
                    <Link href={isSignin ? "/sign-up" : "/sign-in"}
                          className='font-bold text-user-primary ml-1'>{isSignin ? "Sign up" : "Sign in"}</Link>
                </p>
            </div>
        </div>
    )
}
export default AuthForm
